<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="NSE_Icon.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAALGOfPtRkwAAACBjSFJNAACH
        DwAAjA8AAP1SAACBQAAAfXkAAOmLAAA85QAAGcxzPIV3AAAKOWlDQ1BQaG90b3Nob3AgSUNDIHByb2Zp
        bGUAAEjHnZZ3VFTXFofPvXd6oc0wAlKG3rvAANJ7k15FYZgZYCgDDjM0sSGiAhFFRJoiSFDEgNFQJFZE
        sRAUVLAHJAgoMRhFVCxvRtaLrqy89/Ly++Osb+2z97n77L3PWhcAkqcvl5cGSwGQyhPwgzyc6RGRUXTs
        AIABHmCAKQBMVka6X7B7CBDJy82FniFyAl8EAfB6WLwCcNPQM4BOB/+fpFnpfIHomAARm7M5GSwRF4g4
        JUuQLrbPipgalyxmGCVmvihBEcuJOWGRDT77LLKjmNmpPLaIxTmns1PZYu4V8bZMIUfEiK+ICzO5nCwR
        3xKxRoowlSviN+LYVA4zAwAUSWwXcFiJIjYRMYkfEuQi4uUA4EgJX3HcVyzgZAvEl3JJS8/hcxMSBXQd
        li7d1NqaQffkZKVwBALDACYrmcln013SUtOZvBwAFu/8WTLi2tJFRbY0tba0NDQzMv2qUP91829K3NtF
        ehn4uWcQrf+L7a/80hoAYMyJarPziy2uCoDOLQDI3fti0zgAgKSobx3Xv7oPTTwviQJBuo2xcVZWlhGX
        wzISF/QP/U+Hv6GvvmckPu6P8tBdOfFMYYqALq4bKy0lTcinZ6QzWRy64Z+H+B8H/nUeBkGceA6fwxNF
        hImmjMtLELWbx+YKuGk8Opf3n5r4D8P+pMW5FonS+BFQY4yA1HUqQH7tBygKESDR+8Vd/6NvvvgwIH55
        4SqTi3P/7zf9Z8Gl4iWDm/A5ziUohM4S8jMX98TPEqABAUgCKpAHykAd6ABDYAasgC1wBG7AG/iDEBAJ
        VgMWSASpgA+yQB7YBApBMdgJ9oBqUAcaQTNoBcdBJzgFzoNL4Bq4AW6D+2AUTIBnYBa8BgsQBGEhMkSB
        5CEVSBPSh8wgBmQPuUG+UBAUCcVCCRAPEkJ50GaoGCqDqqF6qBn6HjoJnYeuQIPQXWgMmoZ+h97BCEyC
        qbASrAUbwwzYCfaBQ+BVcAK8Bs6FC+AdcCXcAB+FO+Dz8DX4NjwKP4PnEIAQERqiihgiDMQF8UeikHiE
        j6xHipAKpAFpRbqRPuQmMorMIG9RGBQFRUcZomxRnqhQFAu1BrUeVYKqRh1GdaB6UTdRY6hZ1Ec0Ga2I
        1kfboL3QEegEdBa6EF2BbkK3oy+ib6Mn0K8xGAwNo42xwnhiIjFJmLWYEsw+TBvmHGYQM46Zw2Kx8lh9
        rB3WH8vECrCF2CrsUexZ7BB2AvsGR8Sp4Mxw7rgoHA+Xj6vAHcGdwQ3hJnELeCm8Jt4G749n43PwpfhG
        fDf+On4Cv0CQJmgT7AghhCTCJkIloZVwkfCA8JJIJKoRrYmBRC5xI7GSeIx4mThGfEuSIemRXEjRJCFp
        B+kQ6RzpLuklmUzWIjuSo8gC8g5yM/kC+RH5jQRFwkjCS4ItsUGiRqJDYkjiuSReUlPSSXK1ZK5kheQJ
        yeuSM1J4KS0pFymm1HqpGqmTUiNSc9IUaVNpf+lU6RLpI9JXpKdksDJaMm4ybJkCmYMyF2TGKQhFneJC
        YVE2UxopFykTVAxVm+pFTaIWU7+jDlBnZWVkl8mGyWbL1sielh2lITQtmhcthVZKO04bpr1borTEaQln
        yfYlrUuGlszLLZVzlOPIFcm1yd2WeydPl3eTT5bfJd8p/1ABpaCnEKiQpbBf4aLCzFLqUtulrKVFS48v
        vacIK+opBimuVTyo2K84p6Ss5KGUrlSldEFpRpmm7KicpFyufEZ5WoWiYq/CVSlXOavylC5Ld6Kn0Cvp
        vfRZVUVVT1Whar3qgOqCmrZaqFq+WpvaQ3WCOkM9Xr1cvUd9VkNFw08jT6NF454mXpOhmai5V7NPc15L
        Wytca6tWp9aUtpy2l3audov2Ax2yjoPOGp0GnVu6GF2GbrLuPt0berCehV6iXo3edX1Y31Kfq79Pf9AA
        bWBtwDNoMBgxJBk6GWYathiOGdGMfI3yjTqNnhtrGEcZ7zLuM/5oYmGSYtJoct9UxtTbNN+02/R3Mz0z
        llmN2S1zsrm7+QbzLvMXy/SXcZbtX3bHgmLhZ7HVosfig6WVJd+y1XLaSsMq1qrWaoRBZQQwShiXrdHW
        ztYbrE9Zv7WxtBHYHLf5zdbQNtn2iO3Ucu3lnOWNy8ft1OyYdvV2o/Z0+1j7A/ajDqoOTIcGh8eO6o5s
        xybHSSddpySno07PnU2c+c7tzvMuNi7rXM65Iq4erkWuA24ybqFu1W6P3NXcE9xb3Gc9LDzWepzzRHv6
        eO7yHPFS8mJ5NXvNelt5r/Pu9SH5BPtU+zz21fPl+3b7wX7efrv9HqzQXMFb0ekP/L38d/s/DNAOWBPw
        YyAmMCCwJvBJkGlQXlBfMCU4JvhI8OsQ55DSkPuhOqHC0J4wybDosOaw+XDX8LLw0QjjiHUR1yIVIrmR
        XVHYqLCopqi5lW4r96yciLaILoweXqW9KnvVldUKq1NWn46RjGHGnIhFx4bHHol9z/RnNjDn4rziauNm
        WS6svaxnbEd2OXuaY8cp40zG28WXxU8l2CXsTphOdEisSJzhunCruS+SPJPqkuaT/ZMPJX9KCU9pS8Wl
        xqae5Mnwknm9acpp2WmD6frphemja2zW7Fkzy/fhN2VAGasyugRU0c9Uv1BHuEU4lmmfWZP5Jiss60S2
        dDYvuz9HL2d7zmSue+63a1FrWWt78lTzNuWNrXNaV78eWh+3vmeD+oaCDRMbPTYe3kTYlLzpp3yT/LL8
        V5vDN3cXKBVsLBjf4rGlpVCikF84stV2a9021DbutoHt5turtn8sYhddLTYprih+X8IqufqN6TeV33za
        Eb9joNSydP9OzE7ezuFdDrsOl0mX5ZaN7/bb3VFOLy8qf7UnZs+VimUVdXsJe4V7Ryt9K7uqNKp2Vr2v
        Tqy+XeNc01arWLu9dn4fe9/Qfsf9rXVKdcV17w5wD9yp96jvaNBqqDiIOZh58EljWGPft4xvm5sUmoqb
        PhziHRo9HHS4t9mqufmI4pHSFrhF2DJ9NProje9cv+tqNWytb6O1FR8Dx4THnn4f+/3wcZ/jPScYJ1p/
        0Pyhtp3SXtQBdeR0zHYmdo52RXYNnvQ+2dNt293+o9GPh06pnqo5LXu69AzhTMGZT2dzz86dSz83cz7h
        /HhPTM/9CxEXbvUG9g5c9Ll4+ZL7pQt9Tn1nL9tdPnXF5srJq4yrndcsr3X0W/S3/2TxU/uA5UDHdavr
        XTesb3QPLh88M+QwdP6m681Lt7xuXbu94vbgcOjwnZHokdE77DtTd1PuvriXeW/h/sYH6AdFD6UeVjxS
        fNTws+7PbaOWo6fHXMf6Hwc/vj/OGn/2S8Yv7ycKnpCfVEyqTDZPmU2dmnafvvF05dOJZ+nPFmYKf5X+
        tfa5zvMffnP8rX82YnbiBf/Fp99LXsq/PPRq2aueuYC5R69TXy/MF72Rf3P4LeNt37vwd5MLWe+x7ys/
        6H7o/ujz8cGn1E+f/gUDmPP8usTo0wAAAAlwSFlzAAALDAAACwwBP0AiyAAAB/tJREFUWEfFV+tT01ca
        zjidTqezn/ph607LuioQcoWQhIRAEnBR7LZS1KUKKNcAlku43wzhru1aVruLXEIgCQmBcHe5VCrugpda
        FbV2y+5fszPPvuf8yA+cdUf90OmHh3N7z/s873nfc/JDAkDyS0KScunfe7FNY/zMYByckwUusV76Vxjb
        1Efd8o8iKm88R8ncU+SFtkTkT2+hdO4Z7LS21/ZV/dqlH1G++AMYB4Fx7Qjo/Uli7f1pm4Dapefk+Aci
        eIp8Ij0/9VhE0cwTlC884zZvgkoitc0+Qd4eX4yLcQon0PNPBpQxUjLKDT4SwTaV0OYqclJNEb8umD3b
        x/bv9cf8Mx4WJOPkAizdzxmQPfE9Rw6hMPQYn88z4mdvhNLZLQrikeiL+csNPkTx9GOUzz99wRfjFAR0
        PWPAOTK0kWEFGb4JynZIzwYe4Ix/F3mTD1E6s/V/fTFOLsDc8YQB5XNbr40LRFpABNn+75Dluy+CjQun
        HuJzWn+VP8bJBRwunpeY2yk3M49w4RUonKQ0+e/jtOeuiCzvPZwLfAdb6OEr9zP/jIeBcQL/CQv4HiXk
        vGRqB9QvZf3JBygK3EeO7y5OuTeR6d7gODm6gTPeOyigNVvwAQfbb5uiPmGvH+53Bzbyl097zlIAyc4H
        ggD6s8/SxhxRFBP3UTJxD8WBOzjn+TtOD9/CpwM3CWvIGPoWp4bXkevZQJH/DkoINv8mbOMbKCbYxjdR
        7L8LW+AuSgi2wD3RptC3gZzR28gcuoUTg+s4MXwbZsc9On/JPklnZ8dbZscdFNLmk3+lha5VmLuXYXIu
        Qdu8DG3LMo70ruAsCSkYW0feyDoy/rwGc8c3SHIKOHb5JrL615A/egsFntvIG2U235KPVehbVwjLdO2W
        8NG1JZzoX8UfXetIbt3AZ59lvS2ZnZ1+20yD9Gs3EVs2BHnicSh+n81baWQkR+zHNhy/vIzzg+Tky1Vo
        MqsQI1eJ66qUk0ioGMHJq6vIur6K1N5lqDIqECMTbFir/rQSRy8t48z1b5A7soakpnXodNp3BQEt6zjy
        5TLUhVdFp2yjXGcVx5qsRnxyeRGsDQtTmo6LJAoSbHQs0onMQ3G8SLRh82Igf7DhWO8SzvYvwVS/gqQk
        03uSzc1/vGNuXMOJayvQ2b4WjeNz2mFuu4E4Us4cKIgspX2Rt2zM1pMd84irDUFmTOfQt8xCXeEVfejL
        XUhxLoC1YREJNX5k9s0hsXoBKpXyfS4guXEVmVdXoLVdE8hItaVtHp90+l6Ys9JcOCKZOROK/D6o6+cR
        3xiCoXkWR9snocl2ch+qtBwYKPdhsDGb15Dw9N5ZJNqnERl5OEIQUE/F8dUS4ouFFDAS88U5fOT0inNy
        ilDbEII8p+eFNLH8KtOyoavyIc05hVjKfTjal7WxdKLW9mkYK4I4dOjgAcnIyPC7STUL+PjKDWiKwgLS
        kdQ6iyOto1BSlLyQDMcQVxeEvt4PVUEflFSo4SILF5qheRHqHQEydQIFki5CTn0WhCLLQSfmQ8KFwF4B
        FO0XC9DsFCHLZ2ztJBLqhiE7/xUXIDOkw9AUgq7pbxzmFlpvoqKkPWEhrK8+Vc/tmUAT2RsaphBPwpU1
        IahqglQzbto/BH3Z+G4KTPYZWLqmieyKcHwUrbJmAvoGF52AIICpj29c3L0VNZOwtvhI1AxkWotwXQv7
        EFc6INhQamSlbmjsLsirpyBV6SEv6kcs1czRnnHoyvzYv3//r/k1NFZOQd0SgDT3T+Jx66iwUh1eqOm4
        pZFRXIChaRpyKj5pVBRiYo1QZtght56GTGOCTJ8KTR35qR6H1HIaUqUWUrKJOUFvRkIa5MkZUJ//gorb
        j7SeAAkYR0RExHtcgKE8iPiLASiL+/l1UqQXwtgShLXNA7XtujiX2DzBxzFqvRAlCZFGSyFVxCG64C9Q
        VA5CVdWP6At+qpl0YX3HTqY/gthKP11lD1K7SUCpjz3Fv+JPsZ4KIvVyiH4gWI5nkNAyRW+Aj6rVAxMJ
        0zZOU/RBuhljSGwOIK6ejp2OM/pcH6JyryCqchIx9BLGVn8NQ+MATJQadmPUJQNUsFQXJYOIp7Gx2QdL
        B/ntDkIrCHhHEED5SLkUou80ymvPBKxdfljoDWCwdo3D2kno8MJ4cZRyOAiZvR/SKsp15QDk9kEiu063
        xgWLc5SLZrC0j9FD5aF5D5JJuMXppp9gmme+e4J0Al4m4C2CZB8bmHtCtBCiHyKKviuI5E4BBsqZqmkM
        kbUuHK4eEmAfgKJuCLpmN5IoTQwmejOSOsZpT0AA67f76FS9HElOH1/XO8ahaKb3xTYmCGAfJFoamLpD
        MHVNESZhJGL1RbomDaM4UDuCAzUujqgGN2JbvUhs9wtwjgugvpGNOydegKkjwNf0Dh/kTW4crB3e8eWG
        tpgL2McFxBePQt9Bd5SijWr0IKJ6RMSBGjdkpFjnnCBhkzCQnaFjQkD7HvC5ILdhSKC+qsWLQ3VufGgf
        5oigK3mQxkqqkfhi9+4XUXwRI3TjA/uIiMh6ugFUgAZG+jJwIf+LOEeATsqz48dFrQsfVrsQTYFp2nb9
        MU7xk0xTOLxNQETNCI9WS9GyE3ldMMfSJg8n+k3VsIjfUbQKilZPp7PXF+NinFyApmAojG3qc/LXQwCy
        Ji9+S+l6v2JIxAdVrFbGEOfwv9QP4yAwLuFfs7j8gb3YpjF+ZjAOzskF/JL/mjPu/wKE1E1vyQ8jtgAA
        AABJRU5ErkJggg==
</value>
  </data>
</root>